{"ast":null,"code":"var _jsxFileName = \"/Users/ekim5/my_code/projects/ed-shop/src/App.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom'; // connect: is a HOC that allows us to modify our react components have access to the redux state.\n\nimport { connect } from 'react-redux';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop/ShopPage';\nimport LoginSignupPage from './pages/login_signup_page/LoginSignupPage';\nimport CheckoutPage from './pages/checkout_page/CheckoutPage';\nimport NavBar from './components/navbar/NavBar';\nimport { auth, createUserProfileDocument, addCollectionandDocs } from './firebase/firebase.utilities';\nimport { setCurrentUser } from './redux/user/user_action';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    /* \n      An observer method for current user. This the recommended way to get the current user)\n      This is a Firebase feature that allows user persistence. It's an open subscriber that listens to state changes on the Firebase backend. \n    */\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // If user is signed in.\n        const userRef = await createUserProfileDocument(userAuth); // Subscribe(listen) to this userRef for any changes on this data.\n\n        userRef.onSnapshot(snapShot => {\n          // Auth approved user data retrieved from firestore DB\n          const userData = snapShot.data();\n          this.props.setCurrentUser({\n            id: snapShot.id,\n            ...userData\n          }, () => console.log(this.state));\n        });\n      } else {\n        // No user is signed in. (In this case, userAuth will be already set to null)\n        this.props.setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }) : React.createElement(LoginSignupPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = ({\n  user,\n  shop\n}) => {\n  return {\n    currentUser: user.currentUser,\n    shopData: shop.shopData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  // dispatch function: Informs redux that an object will be sent as an action object.\n  return {\n    setCurrentUser: user => dispatch(setCurrentUser(user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/ekim5/my_code/projects/ed-shop/src/App.js"],"names":["React","Route","Redirect","connect","HomePage","ShopPage","LoginSignupPage","CheckoutPage","NavBar","auth","createUserProfileDocument","addCollectionandDocs","setCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","userData","data","props","id","console","log","state","componentWillUnmount","render","currentUser","mapStateToProps","user","shop","shopData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n// connect: is a HOC that allows us to modify our react components have access to the redux state.\nimport { connect } from 'react-redux';\n\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop/ShopPage';\nimport LoginSignupPage from './pages/login_signup_page/LoginSignupPage';\nimport CheckoutPage from './pages/checkout_page/CheckoutPage';\n\nimport NavBar from './components/navbar/NavBar';\n\nimport {\n  auth,\n  createUserProfileDocument,\n  addCollectionandDocs,\n} from './firebase/firebase.utilities';\nimport { setCurrentUser } from './redux/user/user_action';\n\nimport './App.css';\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    /* \n      An observer method for current user. This the recommended way to get the current user)\n      This is a Firebase feature that allows user persistence. It's an open subscriber that listens to state changes on the Firebase backend. \n    */\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // If user is signed in.\n        const userRef = await createUserProfileDocument(userAuth);\n\n        // Subscribe(listen) to this userRef for any changes on this data.\n        userRef.onSnapshot(snapShot => {\n          // Auth approved user data retrieved from firestore DB\n          const userData = snapShot.data();\n\n          this.props.setCurrentUser(\n            {\n              id: snapShot.id,\n              ...userData,\n            },\n            () => console.log(this.state),\n          );\n        });\n      } else {\n        // No user is signed in. (In this case, userAuth will be already set to null)\n        this.props.setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/checkout\" component={CheckoutPage} />\n        <Route path=\"/shop\" component={ShopPage} />\n        <Route\n          path=\"/login\"\n          render={() => (this.props.currentUser ? <Redirect to=\"/\" /> : <LoginSignupPage />)}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user, shop }) => {\n  return {\n    currentUser: user.currentUser,\n    shopData: shop.shopData,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  // dispatch function: Informs redux that an object will be sent as an action object.\n  return {\n    setCurrentUser: user => dispatch(setCurrentUser(user)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}