{"ast":null,"code":"var _jsxFileName = \"/Users/ekim5/my_code/projects/ed-shop/src/App.js\";\nimport React, { useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom'; // connect: is a HOC that allows us to modify our react components have access to the redux state.\n\nimport { connect } from 'react-redux';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop/ShopPage';\nimport LoginSignupPage from './pages/login_signup_page/LoginSignupPage';\nimport CheckoutPage from './pages/checkout_page/CheckoutPage';\nimport NavBar from './components/navbar/NavBar';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utilities';\nimport { setCurrentUser } from './redux/user/user_action';\nimport './App.css';\n\nconst App = props => {\n  const {\n    setCurrentUser,\n    currentUser\n  } = props;\n  useEffect(() => {\n    /* \n      An observer method for current user. This the recommended way to get the current user)\n      This is a Firebase feature that allows user persistence. It's an open subscriber that listens to state changes on the Firebase backend. \n    */\n    console.log('SUBSCRIBING!!!!!!!!!!!!!!!!!!!');\n    const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // If user is signed in.\n        const userRef = await createUserProfileDocument(userAuth); // Subscribe(listen) to this userRef for any changes on this data.\n\n        userRef.onSnapshot(snapShot => {\n          // Auth approved user data retrieved from firestore DB\n          const userData = snapShot.data();\n          setCurrentUser({\n            id: snapShot.id,\n            ...userData\n          });\n        });\n      } else {\n        // No user is signed in. (In this case, userAuth will be already set to null)\n        setCurrentUser(userAuth);\n      }\n    });\n    return () => {\n      console.log('Unsubscribing!1!!!!!!!');\n      unsubscribeFromAuth();\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: HomePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/checkout\",\n    component: CheckoutPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/shop\",\n    component: ShopPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/login\",\n    render: () => currentUser ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }) : React.createElement(LoginSignupPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = ({\n  user,\n  shop\n}) => {\n  return {\n    currentUser: user.currentUser,\n    shopData: shop.shopData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  // dispatch function: Informs redux that an object will be sent as an action object.\n  return {\n    setCurrentUser: user => dispatch(setCurrentUser(user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/ekim5/my_code/projects/ed-shop/src/App.js"],"names":["React","useEffect","Route","Redirect","connect","HomePage","ShopPage","LoginSignupPage","CheckoutPage","NavBar","auth","createUserProfileDocument","setCurrentUser","App","props","currentUser","console","log","unsubscribeFromAuth","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","userData","data","id","mapStateToProps","user","shop","shopData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n// connect: is a HOC that allows us to modify our react components have access to the redux state.\nimport { connect } from 'react-redux';\n\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop/ShopPage';\nimport LoginSignupPage from './pages/login_signup_page/LoginSignupPage';\nimport CheckoutPage from './pages/checkout_page/CheckoutPage';\n\nimport NavBar from './components/navbar/NavBar';\n\nimport { auth, createUserProfileDocument } from './firebase/firebase.utilities';\nimport { setCurrentUser } from './redux/user/user_action';\n\nimport './App.css';\n\nconst App = props => {\n  const { setCurrentUser, currentUser } = props;\n\n  useEffect(() => {\n    /* \n      An observer method for current user. This the recommended way to get the current user)\n      This is a Firebase feature that allows user persistence. It's an open subscriber that listens to state changes on the Firebase backend. \n    */\n    console.log('SUBSCRIBING!!!!!!!!!!!!!!!!!!!');\n    const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // If user is signed in.\n        const userRef = await createUserProfileDocument(userAuth);\n\n        // Subscribe(listen) to this userRef for any changes on this data.\n        userRef.onSnapshot(snapShot => {\n          // Auth approved user data retrieved from firestore DB\n          const userData = snapShot.data();\n\n          setCurrentUser({\n            id: snapShot.id,\n            ...userData,\n          });\n        });\n      } else {\n        // No user is signed in. (In this case, userAuth will be already set to null)\n        setCurrentUser(userAuth);\n      }\n    });\n    return () => {\n      console.log('Unsubscribing!1!!!!!!!');\n      unsubscribeFromAuth();\n    };\n  }, []);\n\n  return (\n    <div>\n      <NavBar />\n\n      <Route exact path=\"/\" component={HomePage} />\n      <Route exact path=\"/checkout\" component={CheckoutPage} />\n      <Route path=\"/shop\" component={ShopPage} />\n      <Route\n        path=\"/login\"\n        render={() => (currentUser ? <Redirect to=\"/\" /> : <LoginSignupPage />)}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ user, shop }) => {\n  return {\n    currentUser: user.currentUser,\n    shopData: shop.shopData,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  // dispatch function: Informs redux that an object will be sent as an action object.\n  return {\n    setCurrentUser: user => dispatch(setCurrentUser(user)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}