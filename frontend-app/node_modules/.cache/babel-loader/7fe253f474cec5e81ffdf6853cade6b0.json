{"ast":null,"code":"/* eslint-disable consistent-return */\n\n/* eslint-disable import/prefer-default-export */\n// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport * as firebase from 'firebase/app'; // Adding the Firebase products to use (auth,db)\n\nimport 'firebase/auth'; // firebase DB\n\nimport 'firebase/firestore'; // pre-built UI\n\nimport 'firebaseui'; // The web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC1b2P_4m0aiYVx_jG0XarNajct0P7CVuc',\n  authDomain: 'jela-bakery-db.firebaseapp.com',\n  databaseURL: 'https://jela-bakery-db.firebaseio.com',\n  projectId: 'jela-bakery-db',\n  storageBucket: 'jela-bakery-db.appspot.com',\n  messagingSenderId: '304892963099',\n  appId: '1:304892963099:web:4f90e5ae7a56296ae60bbe',\n  measurementId: 'G-8NJEN1G2ZK'\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // Firebase Utility methods\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Handling the Google Accounts sign-in flow with Firebase JS SDK\n// Create an instance of the Google provider project\n\nconst provider = new firebase.auth.GoogleAuthProvider(); // Trigger Google Popup everytime user wants to signin with Google account\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  return auth.signInWithPopup(provider);\n}; // Creating user on the firestore DB\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error! User not creating..', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionandDocs = (collectionKey, objToAdd) => {\n  console.log(objToAdd);\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef); // batch.set(newDocRef)\n  });\n}; // Export the entire Firebase library just in case we need it in the app.\n\nexport default firebase;","map":{"version":3,"sources":["/Users/ekim5/my_code/projects/ed-shop/src/firebase/firebase.utilities.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionandDocs","collectionKey","objToAdd","collectionRef","collection","batch","forEach","obj","newDocRef"],"mappings":"AAAA;;AACA;AACA;AACA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B,C,CAEA;;AACA,OAAO,eAAP,C,CACA;;AACA,OAAO,oBAAP,C,CAEA;;AACA,OAAO,YAAP,C,CAEA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,gCAFS;AAGrBC,EAAAA,WAAW,EAAE,uCAHQ;AAIrBC,EAAAA,SAAS,EAAE,gBAJU;AAKrBC,EAAAA,aAAa,EAAE,4BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB,C,CAWA;;AACAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB,E,CAEA;;AACA,OAAO,MAAMU,IAAI,GAAGX,QAAQ,CAACW,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB,C,CAEP;AACA;;AACA,MAAMC,QAAQ,GAAG,IAAIb,QAAQ,CAACW,IAAT,CAAcG,kBAAlB,EAAjB,C,CACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,SAAON,IAAI,CAACO,eAAL,CAAqBL,QAArB,CAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMM,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGV,SAAS,CAACW,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,QAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMT,OAAO,CAACU,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOY,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAAK,CAACG,OAAhD;AACD;AACF;;AACD,SAAOd,OAAP;AACD,CAtBM;AAwBP,OAAO,MAAMe,oBAAoB,GAAG,CAACC,aAAD,EAAgBC,QAAhB,KAA6B;AAC/DL,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACA,QAAMC,aAAa,GAAG5B,SAAS,CAAC6B,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACA,QAAME,KAAK,GAAG9B,SAAS,CAAC8B,KAAV,EAAd;AACAH,EAAAA,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AACtB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ,EAFsB,CAGtB;AACD,GAJD;AAKD,CAVM,C,CAWP;;AACA,eAAe7C,QAAf","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable import/prefer-default-export */\n// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport * as firebase from 'firebase/app';\n\n// Adding the Firebase products to use (auth,db)\nimport 'firebase/auth';\n// firebase DB\nimport 'firebase/firestore';\n\n// pre-built UI\nimport 'firebaseui';\n\n// The web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC1b2P_4m0aiYVx_jG0XarNajct0P7CVuc',\n  authDomain: 'jela-bakery-db.firebaseapp.com',\n  databaseURL: 'https://jela-bakery-db.firebaseio.com',\n  projectId: 'jela-bakery-db',\n  storageBucket: 'jela-bakery-db.appspot.com',\n  messagingSenderId: '304892963099',\n  appId: '1:304892963099:web:4f90e5ae7a56296ae60bbe',\n  measurementId: 'G-8NJEN1G2ZK',\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Firebase Utility methods\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Handling the Google Accounts sign-in flow with Firebase JS SDK\n// Create an instance of the Google provider project\nconst provider = new firebase.auth.GoogleAuthProvider();\n// Trigger Google Popup everytime user wants to signin with Google account\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => {\n  return auth.signInWithPopup(provider);\n};\n\n// Creating user on the firestore DB\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log('Error! User not creating..', error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const addCollectionandDocs = (collectionKey, objToAdd) => {\n  console.log(objToAdd);\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    // batch.set(newDocRef)\n  });\n};\n// Export the entire Firebase library just in case we need it in the app.\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}