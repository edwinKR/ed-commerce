{"ast":null,"code":"var _jsxFileName = \"/Users/ekim5/my_code/projects/ed-shop/src/App.js\";\nimport React from 'react';\nimport { Route } from 'react-router-dom'; // connect: is a HOC that allows us to modify our react components have access to the redux state.\n\nimport { connect } from 'react-redux';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop/ShopPage';\nimport LoginSignupPage from './pages/login_signup_page/LoginSignupPage';\nimport NavBar from './components/navbar/NavBar';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utilities';\nimport { setCurrentUser } from './redux/user/user_action';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    /* \n      An observer method for current user. This the recommended way to get the current user)\n      This is a Firebase feature that allows user persistence. It's an open subscriber that listens to state changes on the Firebase backend. \n    */\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // If user is signed in.\n        const userRef = await createUserProfileDocument(userAuth); // Subscribe(listen) to this userRef for any changes on this data.\n\n        userRef.onSnapshot(snapShot => {\n          // Auth approved user data retrieved from firestore DB\n          const userData = snapShot.data();\n          this.setState({\n            currentUser: {\n              id: snapShot.id,\n              ...userData\n            }\n          }, () => console.log(this.state));\n        });\n      } else {\n        // No user is signed in. (In this case, userAuth will be already set to null)\n        this.setState({\n          currentUser: userAuth\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      component: LoginSignupPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  // dispatch function: Informs redux that an object will be sent as an action object.\n  return {\n    setCurrentUser: user => dispatch(setCurrentUser(user))\n  };\n}; // Don't need the mapDispatchToState for the App.js component since we don't need any state to be used in this current component.\n\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/ekim5/my_code/projects/ed-shop/src/App.js"],"names":["React","Route","connect","HomePage","ShopPage","LoginSignupPage","NavBar","auth","createUserProfileDocument","setCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","userData","data","setState","currentUser","id","console","log","state","componentWillUnmount","render","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,+BAAhD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,mBADgC,GACV,IADU;AAAA;;AAGhCC,EAAAA,iBAAiB,GAAG;AAClB;;;;AAIA,SAAKD,mBAAL,GAA2BL,IAAI,CAACO,kBAAL,CAAwB,MAAMC,QAAN,IAAkB;AACnE,UAAIA,QAAJ,EAAc;AACZ;AACA,cAAMC,OAAO,GAAG,MAAMR,yBAAyB,CAACO,QAAD,CAA/C,CAFY,CAIZ;;AACAC,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAI;AAC7B;AACA,gBAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAT,EAAjB;AAEA,eAAKC,QAAL,CACE;AACEC,YAAAA,WAAW,EAAE;AACXC,cAAAA,EAAE,EAAEL,QAAQ,CAACK,EADF;AAEX,iBAAGJ;AAFQ;AADf,WADF,EAOE,MAAMK,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB,CAPR;AASD,SAbD;AAcD,OAnBD,MAmBO;AACL;AACA,aAAKL,QAAL,CAAc;AACZC,UAAAA,WAAW,EAAEP;AADD,SAAd;AAGD;AACF,KA1B0B,CAA3B;AA2BD;;AAEDY,EAAAA,oBAAoB,GAAG;AACrB,SAAKf,mBAAL;AACD;;AAEDgB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEzB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAEC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD;;AAnD+B;;AAsDlC,MAAMwB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC;AACA,SAAO;AACLrB,IAAAA,cAAc,EAAEsB,IAAI,IAAID,QAAQ,CAACrB,cAAc,CAACsB,IAAD,CAAf;AAD3B,GAAP;AAGD,CALD,C,CAOA;;;AACA,eAAe7B,OAAO,CAAC,IAAD,EAAO2B,kBAAP,CAAP,CAAkCnB,GAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\n// connect: is a HOC that allows us to modify our react components have access to the redux state.\nimport { connect } from 'react-redux';\n\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop/ShopPage';\nimport LoginSignupPage from './pages/login_signup_page/LoginSignupPage';\nimport NavBar from './components/navbar/NavBar';\n\nimport { auth, createUserProfileDocument } from './firebase/firebase.utilities';\nimport { setCurrentUser } from './redux/user/user_action';\n\nimport './App.css';\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    /* \n      An observer method for current user. This the recommended way to get the current user)\n      This is a Firebase feature that allows user persistence. It's an open subscriber that listens to state changes on the Firebase backend. \n    */\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // If user is signed in.\n        const userRef = await createUserProfileDocument(userAuth);\n\n        // Subscribe(listen) to this userRef for any changes on this data.\n        userRef.onSnapshot(snapShot => {\n          // Auth approved user data retrieved from firestore DB\n          const userData = snapShot.data();\n\n          this.setState(\n            {\n              currentUser: {\n                id: snapShot.id,\n                ...userData,\n              },\n            },\n            () => console.log(this.state),\n          );\n        });\n      } else {\n        // No user is signed in. (In this case, userAuth will be already set to null)\n        this.setState({\n          currentUser: userAuth,\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/shop\" component={ShopPage} />\n        <Route path=\"/login\" component={LoginSignupPage} />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  // dispatch function: Informs redux that an object will be sent as an action object.\n  return {\n    setCurrentUser: user => dispatch(setCurrentUser(user)),\n  };\n};\n\n// Don't need the mapDispatchToState for the App.js component since we don't need any state to be used in this current component.\nexport default connect(null, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}