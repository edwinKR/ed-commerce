{"ast":null,"code":"// applyMiddleware() tells createStore() how to handle middleware\nimport { createStore, applyMiddleware } from 'redux'; // Log helper that displays all the previous and after state of the redux code\n\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist'; // import storage from 'redux-persist/lib/storage'; //defaults to localStorage for web.\n\nimport rootReducer from './root_reducer'; // Setting up middlewares with an array, since we may need additional stuff to utilize as our middleware.\n\nconst middlewares = [logger];\nexport default (() => {\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  const persistor = persistStore(store);\n  console.log(store);\n  console.log(persistor);\n  return {\n    store,\n    persistor\n  };\n});","map":{"version":3,"sources":["/Users/ekim5/my_code/projects/ed-shop/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","rootReducer","middlewares","store","persistor","console","log"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C,C,CACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,YAAT,QAA6B,eAA7B,C,CACA;;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACH,MAAD,CAApB;AAEA,gBAAe,MAAM;AACnB,QAAMI,KAAK,GAAGN,WAAW,CAACI,WAAD,EAAcH,eAAe,CAAC,GAAGI,WAAJ,CAA7B,CAAzB;AACA,QAAME,SAAS,GAAGJ,YAAY,CAACG,KAAD,CAA9B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,SAAO;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAND","sourcesContent":["// applyMiddleware() tells createStore() how to handle middleware\nimport { createStore, applyMiddleware } from 'redux';\n// Log helper that displays all the previous and after state of the redux code\nimport logger from 'redux-logger';\n\nimport { persistStore } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage'; //defaults to localStorage for web.\n\nimport rootReducer from './root_reducer';\n\n// Setting up middlewares with an array, since we may need additional stuff to utilize as our middleware.\nconst middlewares = [logger];\n\nexport default () => {\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  const persistor = persistStore(store);\n  console.log(store);\n  console.log(persistor);\n  return { store, persistor };\n};\n"]},"metadata":{},"sourceType":"module"}