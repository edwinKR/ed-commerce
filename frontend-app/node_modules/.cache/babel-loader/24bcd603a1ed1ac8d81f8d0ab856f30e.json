{"ast":null,"code":"// applyMiddleware() tells createStore() how to handle middleware\nimport { createStore, applyMiddleware } from 'redux'; // Log helper that displays all the previous and after state of the redux code\n\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk'; // import storage from 'redux-persist/lib/storage'; //defaults to localStorage for web.\n\nimport { persistStore } from 'redux-persist';\nimport rootReducer from './root_reducer'; // Setting up middlewares with an array, since we may need additional stuff to utilize as our middleware.\n\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport default (() => {\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  const persistor = persistStore(store);\n  return {\n    store,\n    persistor\n  };\n});","map":{"version":3,"sources":["/Users/ekim5/my_code/projects/ed-shop/frontend-app/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","thunk","persistStore","rootReducer","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C,C,CACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACH,KAAD,CAApB;;AAEA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBR,MAAjB;AACD;;AAED,gBAAe,MAAM;AACnB,QAAMS,KAAK,GAAGX,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGK,WAAJ,CAA7B,CAAzB;AACA,QAAMM,SAAS,GAAGR,YAAY,CAACO,KAAD,CAA9B;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAJD","sourcesContent":["// applyMiddleware() tells createStore() how to handle middleware\nimport { createStore, applyMiddleware } from 'redux';\n// Log helper that displays all the previous and after state of the redux code\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// import storage from 'redux-persist/lib/storage'; //defaults to localStorage for web.\nimport { persistStore } from 'redux-persist';\n\nimport rootReducer from './root_reducer';\n\n// Setting up middlewares with an array, since we may need additional stuff to utilize as our middleware.\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport default () => {\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  const persistor = persistStore(store);\n  return { store, persistor };\n};\n"]},"metadata":{},"sourceType":"module"}